CRUD:
✔ Fix the users CRUD (for create) @created(21-11-25 16:37) @done(21-12-29 23:10) @critical
  Fix the validation to know what is required and to return a message if something went wrong

✔ Make password encrypted @created(21-12-29 23:43) @done(21-12-30 01:10) @critical
  To validate
    if (Hash::check('plain-text', $hashedPassword)) { // where plain-text is the "string" to check if its equals
      // The passwords match...
    }

✔ Clear some of the code at UsersController and RolesController @created(21-12-30 01:10) @low @started(22-01-31 10:36) @done(22-01-31 10:36) @lasted(24s)
  and clear some of the comments etc and make it more readable

✔ Try to fix every method in Users and Roles so it's like the same @created(21-12-29 23:11) @started(21-12-30 01:15) @critical @done(22-01-31 10:36) @lasted(4w4d9h21m27s)
  just like method to update the Roles and try to fix every
  `
  $role = Roles::find($id);
  if(!$role)
      return response("Role with id '". $id . "' doesn't exist", 400);

  if($role->update($request->only("roleName")))
      return response("Updated successfully", 200);
      `
✔ Remember, remove the output of "myinfo" api @created(22-02-09 00:36) @critical @critical @critical @critical @started(22-02-09 21:09) @done(22-02-09 21:09) @lasted(30s)
  remove not all the ouput remove the mailverified and the roleid because you know (•_•)

FINISHING CRUD for USERS and ROLES:
  ✔ When finish this fix the migrations we will remove almost all the database I have right now @created(22-01-31 10:37) @started(22-01-31 10:38) @done(22-01-31 10:38) @critical
    We will do the mint stuff of the nft after we do the CRUD of Users and Roles @critical
  ✔ Make CRUD of Users and Roles @created(21-10-16 21:59) @started(21-10-29 22:01) @critical @done(22-01-31 10:36) @lasted(13w2d13h35m35s)
    ✔ CRUD Roles @created(21-10-29 22:00) @done(21-10-31 18:19)
    ✔ CRUD Users @created(21-10-29 22:01) @done(22-01-31 10:36)
  ✔ Make the API to authenticate a user and give a bearer token @created(22-02-05 22:24) @started(22-02-06 22:22) @done(22-02-06 22:22) @lasted(53s)
  ✔ Make the public CRUD @created(22-02-06 22:23) @started(22-02-06 23:20) @done(22-02-21 09:22) @lasted(2w10h2m26s)
    So when a user logs in he can change his own infos
  IMPORTANT TO MAKE THE LOGOUT WORK:
    ☐ LOGOUT WILL NO WORK IN BACKEND ITS BETTER TO CLEAR STORAGE OR CACHE IN FRONTEND WHEN CLICK LOGOUT XD @created(22-02-06 23:04)
  IMPORTANT THINGS:
    ☐ Make a get request to know if someone is admin @created(22-02-23 22:23) @critical
      just use the middleware ez
    ☐ Make a password recovery system @created(22-02-02 20:06) @critical
    ☐ Make like a token validation @created(22-02-21 09:22) @critical
      the bearer token so like the login system can validate the token and probably
      manage it through it
    ☐ Continue the organization in Postman to a better organization a QoL @created(22-02-21 10:25)
      So you can test the api faster ahahah
    ✘ Make the mail verify or remove the mail verify @created(22-02-06 23:21) @low @cancelled(22-02-21 09:22)
      if you have no time to make it just remove it stonks
    ✔ Make the Posts CRUD @created(22-01-31 10:36) @high @done(22-02-21 09:22)
    ✔ Make REST API safe @created(22-01-31 10:36) @critical @started(22-02-06 22:23) @done(22-02-21 09:22) @lasted(2w10h59m36s)
      because we have some methods that could be a problem
      "Since it’s a client device you can’t use simple IP checks (As you could with a server using your API).
      Instead you’re going to have to rely on something the client sends you to verify that it is in fact your application.

      Here are some ideas;

      Encrypt data and include a key.
      Encrypt data and include key based on time, and timestamp, server confirms.
      User authentication (If that applies).
      Rotating keys after initial authentication
      I’ve never had to solve this problem, so these ideas are just off the top of my head."

      Tentar fazer com que todos os requests da api sejam preciso tipo uma key alguma coisa assim.
